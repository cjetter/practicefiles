#########################################################################################################################
# Program visualizes the temp and humidity data via bokeh server
# 
# Data feeds from database generated by SQL_DHTtest_CMJ.py file
# First step is to start a bokeh server by entering "bokeh serve --show filename.py"
#
#########################################################################################################################

#import libraries
import time as t
import datetime as dt 
import sqlite3
from random import randrange
#from bokeh.core.properties import Enum
from bokeh.plotting import figure
from bokeh.io import curdoc
from bokeh.layouts import column, widgetbox
from bokeh.models import *
from bokeh.models.widgets import Button, RadioButtonGroup, Tabs, Panel
from math import radians


#create tools used within temperature figure
hover = HoverTool(tooltips=[
    ("Fecha", '$x{%m/%d/%Y %H:%M:%S}'),
    ("Temp. (C)", '@y{0.00}')],
    #formatters={'x': 'datetime'},
    mode='vline')
reset_tool = ResetTool()
wheel_zoom_tool = WheelZoomTool()
pan_tool = PanTool()

#create tools used within humidity figure
hover2 = HoverTool(tooltips=[
    ("Fecha / Hora", '@x{%F}'),
    ("Hum. (%)", '@y{0.00%}')],
    formatters={'x': 'datetime'},
    mode='vline')
reset_tool2 = ResetTool()
wheel_zoom_tool2 = WheelZoomTool()
pan_tool2 = PanTool()


#create radio button group for setting x-axis range
radio_button_group = RadioButtonGroup(
        labels=["1 Hora","12 Horas", "1 Día", "1 Semana","1 Mes","3 Meses","6 Meses","1 Año","Todo"], active=0)

#create figure for temperatura
f_temp = figure(title='Temperatura/Tiempo',x_axis_type='datetime',x_axis_label='tiempo',y_axis_label='temperatura (C)',
plot_width = 1200,plot_height = 400,tools=[hover,reset_tool,wheel_zoom_tool,pan_tool],toolbar_location="above",y_range=(-5, 25),)#x_range=(start_dt,end_dt))
f_temp.min_border_bottom=60
f_temp.title.text_font_size='12pt'
f_temp.title.text_font_style='bold'
f_temp.yaxis[0].formatter = NumeralTickFormatter(format='0,0.00')
tab1 = Panel(child=f_temp, title="Temperatura")

#create figure for humedad
f_hum = figure(title='Humedad/Tiempo',x_axis_type='datetime',x_axis_label='tiempo',y_axis_label='humedad (%)',
plot_width = 1200,plot_height = 400,tools=[hover2,reset_tool2,wheel_zoom_tool2,pan_tool2],y_range=(0,1),)#x_range=(start_dt,end_dt))
f_hum.min_border_bottom=60
f_hum.title.text_font_size='12pt'
f_hum.title.text_font_style='bold'
f_hum.yaxis[0].formatter = NumeralTickFormatter(format='0.00%')
tab2 = Panel(child=f_hum, title="Humedad")

#create box annotation to highlight acceptable ranges for humidity
maxpercent = .8
minpercent = .5
low_box = BoxAnnotation(top=minpercent, fill_alpha=0.1, fill_color='red')
mid_box = BoxAnnotation(bottom=minpercent, top=maxpercent, fill_alpha=0.1, fill_color='green')
high_box = BoxAnnotation(bottom=maxpercent, fill_alpha=0.1, fill_color='red')
f_hum.add_layout(low_box)
f_hum.add_layout(mid_box)
f_hum.add_layout(high_box)

# Set date format for x_axis of each plot
f_temp.xaxis.formatter=DatetimeTickFormatter(milliseconds=["%m/%d/%Y %H:%M:%S:%3N"],
seconds=["%m/%d/%Y %H:%M:%S"],
minsec=["%m/%d/%Y %H:%M:%S"],
minutes=["%m/%d/%Y %H:%M:%S"],
hourmin=["%m/%d/%Y %H:%M:%S"],
hours=["%m/%d/%Y %H:%M:%S"],
days=["%m/%d/%Y %H:%M:%S"],
months=["%m/%d/%Y %H:%M:%S"],
years=["%m/%d/%Y %H:%M:%S"],)
f_temp.xaxis.major_label_orientation = radians(45)

f_hum.xaxis.formatter=DatetimeTickFormatter(milliseconds=["%m/%d/%Y %H:%M:%S:%3N"],
seconds=["%m/%d/%Y %H:%M:%S"],
minsec=["%m/%d/%Y %H:%M:%S"],
minutes=["%m/%d/%Y %H:%M:%S"],
hourmin=["%m/%d/%Y %H:%M:%S"],
hours=["%m/%d/%Y %H:%M:%S"],
days=["%m/%d/%Y %H:%M:%S"],
months=["%m/%d/%Y %H:%M:%S"],
years=["%m/%d/%Y %H:%M:%S"],)
f_hum.xaxis.major_label_orientation = radians(45)

# create datasource
filepath0='/Users/Apple/Documents/Programming/Python/Other Projects/Greenhouse/DHT.sqlite'
#filepath='/Users/Apple/Adafruit_Python_DHT/tito/SQL_Log/DHT.sqlite'
conn = sqlite3.connect(filepath0)
cur = conn.cursor()
cur.execute('SELECT DateTime FROM LogData')
x_list = [i[0] for i in cur.fetchall()]
x_list = [dt.datetime.strptime(i, '%m/%d/%Y %H:%M:%S') for i in x_list]
cur.execute('SELECT Temperature FROM LogData')
y_list = [i[0] for i in cur.fetchall()]
cur.execute('SELECT Humidity FROM LogData')
y2_list = [i[0] for i in cur.fetchall()]
source=ColumnDataSource(dict(x=x_list,y=y_list))
source2=ColumnDataSource(dict(x=x_list,y=y2_list))

#plot line of data
f_temp.line(source=source,x='x',y='y',line_color='firebrick',line_width=2,legend="temperatura")
f_hum.line(source=source2,x='x',y='y',line_color='navy',line_width=2,legend="humedad")

# create periodic function
def update():
    conn = sqlite3.connect(filepath0)
    cur = conn.cursor()
    cur.execute('''
                   SELECT * FROM LogData
                   ORDER BY DateTime DESC LIMIT 1
                   ''')    
    x = cur.fetchone()[0]
    x = list((dt.datetime.strptime(x, '%m/%d/%Y %H:%M:%S'),))
    cur.execute('''
                   SELECT * FROM LogData
                   ORDER BY DateTime DESC LIMIT 1
                   ''')  
    y_temp = list((cur.fetchone()[2],))
    cur.execute('''
                   SELECT * FROM LogData
                   ORDER BY DateTime DESC LIMIT 1
                   ''')  
    y_hum = list((cur.fetchone()[1],))
    new_data = dict(x=x,y=y_temp)
    new_data2 = dict(x=x,y=y_hum)
    source.stream(new_data)
    source2.stream(new_data2)

# Update xaxis function
def update_xaxis():
    # Calculate time delta from reference time in seconds
    timestamp_start = (datetime.combine(datepicker_start.value, datetime.min.time())
                        - datetime(1970, 1, 1)) / timedelta(seconds=1)
    timestamp_end = (datetime.combine(datepicker_end.value, datetime.min.time())
                        - datetime(1970, 1, 1)) / timedelta(seconds=1)
    f.x_range.start = int(timestamp_start)*1e3  # Multiply by 1e3 as JS timestamp is in milliseconds
    f.x_range.end   = int(timestamp_end)*1e3  # Multiply by 1e3 as JS timestamp is in milliseconds

# Create Datepicker and Button widgets
datepicker_start = DatePicker(title='Start Date')
datepicker_end = DatePicker(title='End Date')
button = Button(label='Set Date')

# Update x_axis range on click
button.on_click(update_xaxis)

tabs = Tabs(tabs=[ tab1, tab2 ])

#add figure to curdoc and configure callback
curdoc().add_root(tabs)
# curdoc().add_root(radio_button_group)
# curdoc().add_root(f_temp)
# curdoc().add_root(f_hum)
curdoc().add_periodic_callback(update,6000)